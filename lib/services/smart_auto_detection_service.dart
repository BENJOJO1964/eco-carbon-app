import 'dart:async';
import 'dart:math';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import '../models/carbon_record.dart';
import '../services/carbon_calculator.dart';
import 'location_service.dart';
import 'sensor_service.dart';
import 'invoice_carrier_service.dart';
import 'payment_binding_service.dart';
import 'camera_scanning_service.dart';

class SmartAutoDetectionService extends ChangeNotifier {
  // 各種偵測服務
  final LocationService _locationService = LocationService();
  final SensorService _sensorService = SensorService.instance;
  final InvoiceCarrierService _invoiceCarrierService = InvoiceCarrierService();
  final PaymentBindingService _paymentBindingService = PaymentBindingService();
  final CameraScanningService _cameraScanningService = CameraScanningService();

  // 偵測狀態
  bool _isEnabled = false;
  bool _isInitialized = false;
  Timer? _detectionTimer;
  Timer? _analysisTimer;

  // 偵測到的活動數據
  final List<DetectedActivity> _detectedActivities = [];
  final List<CarbonRecord> _autoGeneratedRecords = [];
  
  // 用戶行為模式學習
  final Map<String, UserPattern> _userPatterns = {};
  
  // 智能預測數據
  final Map<String, dynamic> _predictionData = {};

  // Getters
  bool get isEnabled => _isEnabled;
  bool get isInitialized => _isInitialized;
  List<DetectedActivity> get detectedActivities => List.unmodifiable(_detectedActivities);
  List<CarbonRecord> get autoGeneratedRecords => List.unmodifiable(_autoGeneratedRecords);
  Map<String, UserPattern> get userPatterns => Map.unmodifiable(_userPatterns);

  Future<void> initialize() async {
    try {
      // 初始化各種服務
      await _invoiceCarrierService.initialize();
      await _paymentBindingService.initialize();
      await _cameraScanningService.initialize();
      
      await _loadUserPatterns();
      await _loadPredictionData();
      
      _isInitialized = true;
      debugPrint('智能自動偵測服務初始化完成');
      notifyListeners();
    } catch (e) {
      debugPrint('智能自動偵測服務初始化失敗: $e');
    }
  }

  Future<void> enableAutoDetection() async {
    if (!_isInitialized) {
      await initialize();
    }
    
    _isEnabled = true;
    
    // 啟動定期偵測
    _detectionTimer = Timer.periodic(const Duration(seconds: 30), (timer) {
      _performSmartDetection();
    });
    
    // 啟動定期分析
    _analysisTimer = Timer.periodic(const Duration(minutes: 5), (timer) {
      _analyzeAndGenerateRecords();
    });
    
    // 啟動各種偵測服務
    await _startAllDetectionServices();
    
    debugPrint('智能自動偵測已啟用');
    notifyListeners();
  }

  Future<void> disableAutoDetection() async {
    _isEnabled = false;
    
    _detectionTimer?.cancel();
    _analysisTimer?.cancel();
    
    await _stopAllDetectionServices();
    
    debugPrint('智能自動偵測已停用');
    notifyListeners();
  }

  Future<void> _startAllDetectionServices() async {
    // 啟動位置偵測
    _locationService.startLocationTracking();
    
    // 啟動感應器偵測
    _sensorService.startSensorMonitoring();
    
    // 啟動發票監控
    if (_invoiceCarrierService.isCarrierBound) {
      await _invoiceCarrierService.startMonitoring();
    }
    
    // 啟動支付監控
    if (_paymentBindingService.hasBoundPlatforms) {
      await _paymentBindingService.startMonitoring();
    }
  }

  Future<void> _stopAllDetectionServices() async {
    _locationService.stopLocationTracking();
    _sensorService.stopSensorMonitoring();
    await _invoiceCarrierService.stopMonitoring();
    await _paymentBindingService.stopMonitoring();
  }

  Future<void> _performSmartDetection() async {
    if (!_isEnabled) return;

    try {
      // 1. 偵測交通活動
      await _detectTransportActivity();
      
      // 2. 偵測購物活動
      await _detectShoppingActivity();
      
      // 3. 偵測飲食活動
      await _detectFoodActivity();
      
      // 4. 偵測用電活動
      await _detectEnergyActivity();
      
      // 5. 學習用戶行為模式
      await _learnUserPatterns();
      
    } catch (e) {
      debugPrint('智能偵測失敗: $e');
    }
  }

  Future<void> _detectTransportActivity() async {
    final locationData = _locationService.getCurrentLocation();
    final sensorData = _sensorService.getCurrentSensorData();
    
    if (locationData != null && sensorData != null) {
      // 分析移動模式和速度
      final speed = _calculateSpeed(locationData);
      final movementPattern = _analyzeMovementPattern(sensorData);
      
      if (speed > 5.0) { // 超過步行速度
        final transportType = _inferTransportType(speed, movementPattern);
        
        final activity = DetectedActivity(
          id: DateTime.now().millisecondsSinceEpoch.toString(),
          type: ActivityType.transport,
          confidence: _calculateConfidence(speed, movementPattern),
          data: {
            'speed': speed,
            'transport_type': transportType.toString(),
            'movement_pattern': movementPattern,
            'location': locationData,
          },
          timestamp: DateTime.now(),
        );
        
        _addDetectedActivity(activity);
      }
    }
  }

  Future<void> _detectShoppingActivity() async {
    // 檢查發票載具服務
    final invoices = _invoiceCarrierService.detectedInvoices;
    if (invoices.isNotEmpty) {
      for (final invoice in invoices) {
        final activity = DetectedActivity(
          id: 'invoice_${invoice.id}',
          type: ActivityType.shopping,
          confidence: 0.9, // 發票數據可信度很高
          data: {
            'source': 'invoice_carrier',
            'amount': invoice.distance,
            'store': invoice.metadata?['store_name'],
            'items': invoice.description,
          },
          timestamp: invoice.timestamp,
        );
        
        _addDetectedActivity(activity);
      }
    }
    
    // 檢查支付記錄
    final payments = _paymentBindingService.detectedPayments;
    if (payments.isNotEmpty) {
      for (final payment in payments) {
        final activity = DetectedActivity(
          id: 'payment_${payment.id}',
          type: ActivityType.shopping,
          confidence: 0.8, // 支付數據可信度較高
          data: {
            'source': 'payment_monitoring',
            'amount': payment.distance,
            'platform': payment.metadata?['platform'],
            'description': payment.description,
          },
          timestamp: payment.timestamp,
        );
        
        _addDetectedActivity(activity);
      }
    }
  }

  Future<void> _detectFoodActivity() async {
    // 基於支付記錄和時間模式推斷飲食活動
    final payments = _paymentBindingService.detectedPayments;
    final now = DateTime.now();
    
    for (final payment in payments) {
      final paymentTime = payment.timestamp;
      final timeDiff = now.difference(paymentTime).inMinutes;
      
      // 如果是最近的支付記錄，且金額在飲食範圍內
      if (timeDiff < 60 && payment.distance >= 50 && payment.distance <= 500) {
        final isMealTime = _isMealTime(paymentTime);
        final description = payment.description?.toLowerCase() ?? '';
        
        if (isMealTime || description.contains('餐') || description.contains('食')) {
          final activity = DetectedActivity(
            id: 'food_${payment.id}',
            type: ActivityType.food,
            confidence: isMealTime ? 0.8 : 0.6,
            data: {
              'source': 'payment_analysis',
              'amount': payment.distance,
              'meal_type': _inferMealType(paymentTime),
              'description': payment.description,
            },
            timestamp: paymentTime,
          );
          
          _addDetectedActivity(activity);
        }
      }
    }
  }

  Future<void> _detectEnergyActivity() async {
    // 基於感應器數據推斷用電活動
    final sensorData = _sensorService.getCurrentSensorData();
    
    if (sensorData != null) {
      // 分析設備使用模式
      final deviceUsage = _analyzeDeviceUsage(sensorData);
      
      if (deviceUsage['is_heavy_usage'] == true) {
        final activity = DetectedActivity(
          id: 'energy_${DateTime.now().millisecondsSinceEpoch}',
          type: ActivityType.energy,
          confidence: 0.7,
          data: {
            'source': 'sensor_analysis',
            'usage_pattern': deviceUsage,
            'estimated_consumption': deviceUsage['estimated_kwh'],
          },
          timestamp: DateTime.now(),
        );
        
        _addDetectedActivity(activity);
      }
    }
  }

  Future<void> _analyzeAndGenerateRecords() async {
    // 分析偵測到的活動，生成碳足跡記錄
    final recentActivities = _detectedActivities
        .where((activity) => 
            DateTime.now().difference(activity.timestamp).inMinutes < 30)
        .toList();
    
    for (final activity in recentActivities) {
      final record = _generateCarbonRecord(activity);
      if (record != null) {
        _autoGeneratedRecords.add(record);
        debugPrint('自動生成碳足跡記錄: ${record.type} - ${record.carbonFootprint} kg CO₂');
      }
    }
    
    // 清理舊的活動數據
    _detectedActivities.removeWhere((activity) => 
        DateTime.now().difference(activity.timestamp).inHours > 24);
    
    notifyListeners();
  }

  CarbonRecord? _generateCarbonRecord(DetectedActivity activity) {
    try {
      switch (activity.type) {
        case ActivityType.transport:
          return _generateTransportRecord(activity);
        case ActivityType.shopping:
          return _generateShoppingRecord(activity);
        case ActivityType.food:
          return _generateFoodRecord(activity);
        case ActivityType.energy:
          return _generateEnergyRecord(activity);
        default:
          return null;
      }
    } catch (e) {
      debugPrint('生成碳足跡記錄失敗: $e');
      return null;
    }
  }

  CarbonRecord _generateTransportRecord(DetectedActivity activity) {
    final speed = activity.data['speed'] as double;
    final transportType = activity.data['transport_type'] as String;
    
    // 估算距離（基於速度和時間）
    final estimatedDistance = speed * 0.5; // 假設平均移動時間30分鐘
    
    // 轉換為對應的 TransportType
    TransportType type;
    switch (transportType) {
      case 'car':
        type = TransportType.car;
        break;
      case 'bus':
        type = TransportType.bus;
        break;
      case 'subway':
        type = TransportType.subway;
        break;
      case 'motorcycle':
        type = TransportType.motorcycle;
        break;
      default:
        type = TransportType.car;
    }
    
    final carbonFootprint = CarbonCalculator.calculateTransportCarbon(type, estimatedDistance);
    
    return CarbonRecord(
      id: 'auto_${activity.id}',
      userId: 'current_user',
      type: RecordType.transport,
      distance: estimatedDistance,
      carbonFootprint: carbonFootprint,
      description: '自動偵測 - ${CarbonCalculator.getTransportTypeName(type)}',
      timestamp: activity.timestamp,
      metadata: {
        'source': 'smart_auto_detection',
        'confidence': activity.confidence,
        'transport_type': transportType,
        'speed': speed,
        'auto_detected': true,
      },
    );
  }

  CarbonRecord _generateShoppingRecord(DetectedActivity activity) {
    final amount = activity.data['amount'] as double;
    final carbonFootprint = CarbonCalculator.calculateShoppingCarbon(amount);
    
    return CarbonRecord(
      id: 'auto_${activity.id}',
      userId: 'current_user',
      type: RecordType.shopping,
      distance: amount,
      carbonFootprint: carbonFootprint,
      description: '自動偵測 - 購物消費',
      timestamp: activity.timestamp,
      metadata: {
        'source': 'smart_auto_detection',
        'confidence': activity.confidence,
        'store': activity.data['store'],
        'auto_detected': true,
      },
    );
  }

  CarbonRecord _generateFoodRecord(DetectedActivity activity) {
    final amount = activity.data['amount'] as double;
    final mealType = activity.data['meal_type'] as String;
    
    // 基於金額估算食物重量
    final estimatedWeight = amount / 50.0; // 假設每50元對應1kg食物
    final foodType = _inferFoodType(mealType);
    
    final carbonFootprint = CarbonCalculator.calculateFoodCarbon(estimatedWeight, foodType);
    
    return CarbonRecord(
      id: 'auto_${activity.id}',
      userId: 'current_user',
      type: RecordType.food,
      distance: estimatedWeight,
      carbonFootprint: carbonFootprint,
      description: '自動偵測 - $mealType',
      timestamp: activity.timestamp,
      metadata: {
        'source': 'smart_auto_detection',
        'confidence': activity.confidence,
        'meal_type': mealType,
        'food_type': foodType.toString(),
        'auto_detected': true,
      },
    );
  }

  CarbonRecord _generateEnergyRecord(DetectedActivity activity) {
    final consumption = activity.data['estimated_consumption'] as double;
    final carbonFootprint = CarbonCalculator.calculateEnergyCarbon(consumption);
    
    return CarbonRecord(
      id: 'auto_${activity.id}',
      userId: 'current_user',
      type: RecordType.energy,
      distance: consumption,
      carbonFootprint: carbonFootprint,
      description: '自動偵測 - 用電消耗',
      timestamp: activity.timestamp,
      metadata: {
        'source': 'smart_auto_detection',
        'confidence': activity.confidence,
        'usage_pattern': activity.data['usage_pattern'],
        'auto_detected': true,
      },
    );
  }

  // 輔助方法
  void _addDetectedActivity(DetectedActivity activity) {
    // 避免重複添加相同的活動
    final exists = _detectedActivities.any((existing) => 
        existing.id == activity.id);
    
    if (!exists) {
      _detectedActivities.add(activity);
      debugPrint('偵測到新活動: ${activity.type} (可信度: ${activity.confidence})');
    }
  }

  double _calculateSpeed(dynamic locationData) {
    // 簡化的速度計算
    return Random().nextDouble() * 50.0; // 模擬速度數據
  }

  String _analyzeMovementPattern(dynamic sensorData) {
    // 簡化的移動模式分析
    return 'walking';
  }

  String _inferTransportType(double speed, String movementPattern) {
    if (speed > 30) return 'car';
    if (speed > 15) return 'bus';
    if (speed > 10) return 'subway';
    return 'walking';
  }

  double _calculateConfidence(double speed, String movementPattern) {
    // 基於速度和移動模式計算可信度
    if (speed > 20) return 0.9;
    if (speed > 10) return 0.8;
    return 0.6;
  }

  bool _isMealTime(DateTime time) {
    final hour = time.hour;
    return (hour >= 7 && hour <= 9) ||   // 早餐
           (hour >= 12 && hour <= 14) || // 午餐
           (hour >= 18 && hour <= 20);   // 晚餐
  }

  String _inferMealType(DateTime time) {
    final hour = time.hour;
    if (hour >= 7 && hour <= 9) return '早餐';
    if (hour >= 12 && hour <= 14) return '午餐';
    if (hour >= 18 && hour <= 20) return '晚餐';
    return '點心';
  }

  String _inferFoodType(String mealType) {
    switch (mealType) {
      case '早餐':
        return 'grains';
      case '午餐':
        return 'meat';
      case '晚餐':
        return 'vegetables';
      default:
        return 'processed';
    }
  }

  Map<String, dynamic> _analyzeDeviceUsage(dynamic sensorData) {
    // 簡化的設備使用分析
    return {
      'is_heavy_usage': Random().nextBool(),
      'estimated_kwh': Random().nextDouble() * 2.0,
    };
  }

  Future<void> _learnUserPatterns() async {
    // 學習用戶行為模式
    final now = DateTime.now();
    final hour = now.hour;
    final dayOfWeek = now.weekday;
    
    final patternKey = '${dayOfWeek}_$hour';
    _userPatterns[patternKey] = UserPattern(
      timeSlot: patternKey,
      commonActivities: ['transport', 'shopping'],
      averageAmount: 100.0,
      frequency: (_userPatterns[patternKey]?.frequency ?? 0) + 1,
    );
    
    await _saveUserPatterns();
  }

  Future<void> _loadUserPatterns() async {
    final prefs = await SharedPreferences.getInstance();
    // 載入用戶模式數據
  }

  Future<void> _saveUserPatterns() async {
    final prefs = await SharedPreferences.getInstance();
    // 保存用戶模式數據
  }

  Future<void> _loadPredictionData() async {
    final prefs = await SharedPreferences.getInstance();
    // 載入預測數據
  }

  // 智能預填功能
  Map<String, dynamic> getPredictedData(String activityType) {
    final now = DateTime.now();
    final hour = now.hour;
    final dayOfWeek = now.weekday;
    final patternKey = '${dayOfWeek}_$hour';
    
    final pattern = _userPatterns[patternKey];
    if (pattern != null) {
      return {
        'predicted_amount': pattern.averageAmount,
        'confidence': pattern.frequency / 10.0, // 基於頻率計算可信度
        'common_activities': pattern.commonActivities,
      };
    }
    
    return {};
  }

  void clearAutoGeneratedRecords() {
    _autoGeneratedRecords.clear();
    notifyListeners();
  }

  @override
  void dispose() {
    _detectionTimer?.cancel();
    _analysisTimer?.cancel();
    _locationService.stopLocationTracking();
    _sensorService.stopSensorMonitoring();
    super.dispose();
  }
}

// 偵測到的活動數據模型
class DetectedActivity {
  final String id;
  final ActivityType type;
  final double confidence;
  final Map<String, dynamic> data;
  final DateTime timestamp;

  DetectedActivity({
    required this.id,
    required this.type,
    required this.confidence,
    required this.data,
    required this.timestamp,
  });
}

enum ActivityType {
  transport,
  shopping,
  food,
  energy,
  delivery,
  express,
  accommodation,
  other,
}

// 用戶行為模式模型
class UserPattern {
  final String timeSlot;
  final List<String> commonActivities;
  final double averageAmount;
  final int frequency;

  UserPattern({
    required this.timeSlot,
    required this.commonActivities,
    required this.averageAmount,
    required this.frequency,
  });
}
