import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import '../providers/carbon_provider.dart';
import '../services/smart_auto_detection_service.dart';
import '../models/carbon_record.dart';
import '../l10n/app_localizations.dart';

class SmartQuickRecordScreen extends StatefulWidget {
  const SmartQuickRecordScreen({super.key});

  @override
  State<SmartQuickRecordScreen> createState() => _SmartQuickRecordScreenState();
}

class _SmartQuickRecordScreenState extends State<SmartQuickRecordScreen> {
  final _formKey = GlobalKey<FormState>();
  final _amountController = TextEditingController();
  final _descriptionController = TextEditingController();
  
  String _selectedType = 'auto_detect';
  bool _isLoading = false;
  Map<String, dynamic> _predictedData = {};

  @override
  void initState() {
    super.initState();
    _loadPredictedData();
  }

  @override
  void dispose() {
    _amountController.dispose();
    _descriptionController.dispose();
    super.dispose();
  }

  void _loadPredictedData() {
    final smartDetection = Provider.of<SmartAutoDetectionService>(context, listen: false);
    _predictedData = smartDetection.getPredictedData('shopping');
    
    if (_predictedData.isNotEmpty) {
      _amountController.text = _predictedData['predicted_amount']?.toString() ?? '';
    }
  }

  @override
  Widget build(BuildContext context) {
    final l10n = AppLocalizations.of(context)!;
    
    return Scaffold(
      appBar: AppBar(
        title: const Text('智能快速記錄'),
        backgroundColor: Colors.green,
        foregroundColor: Colors.white,
        actions: [
          TextButton(
            onPressed: _saveRecord,
            child: _isLoading
                ? const SizedBox(
                    width: 20,
                    height: 20,
                    child: CircularProgressIndicator(
                      color: Colors.white,
                      strokeWidth: 2,
                    ),
                  )
                : Text(
                    l10n.save,
                    style: const TextStyle(color: Colors.white),
                  ),
          ),
        ],
      ),
      body: Consumer<SmartAutoDetectionService>(
        builder: (context, smartDetection, child) {
          return SingleChildScrollView(
            padding: const EdgeInsets.all(16),
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                // 自動偵測狀態卡片
                _buildAutoDetectionStatusCard(smartDetection, l10n),
                const SizedBox(height: 16),
                
                // 自動生成的記錄
                if (smartDetection.autoGeneratedRecords.isNotEmpty)
                  _buildAutoGeneratedRecordsCard(smartDetection, l10n),
                
                const SizedBox(height: 16),
                
                // 智能預測卡片
                if (_predictedData.isNotEmpty)
                  _buildPredictionCard(l10n),
                
                const SizedBox(height: 16),
                
                // 快速記錄表單
                _buildQuickRecordForm(l10n),
                
                const SizedBox(height: 16),
                
                // 手動輸入選項
                _buildManualInputOption(l10n),
              ],
            ),
          );
        },
      ),
    );
  }

  Widget _buildAutoDetectionStatusCard(SmartAutoDetectionService smartDetection, AppLocalizations l10n) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(
                  Icons.auto_awesome,
                  color: smartDetection.isEnabled ? Colors.green : Colors.grey,
                  size: 24,
                ),
                const SizedBox(width: 12),
                Expanded(
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      Text(
                        '智能自動偵測',
                        style: Theme.of(context).textTheme.titleMedium?.copyWith(
                              fontWeight: FontWeight.bold,
                            ),
                      ),
                      Text(
                        smartDetection.isEnabled 
                            ? '已啟用 - 正在自動收集碳足跡數據' 
                            : '未啟用 - 點擊下方按鈕啟用',
                        style: TextStyle(
                          color: smartDetection.isEnabled ? Colors.green : Colors.grey,
                          fontSize: 14,
                        ),
                      ),
                    ],
                  ),
                ),
                Switch(
                  value: smartDetection.isEnabled,
                  onChanged: (value) async {
                    if (value) {
                      await smartDetection.enableAutoDetection();
                    } else {
                      await smartDetection.disableAutoDetection();
                    }
                  },
                  activeColor: Colors.green,
                ),
              ],
            ),
            if (smartDetection.isEnabled) ...[
              const SizedBox(height: 12),
              Row(
                children: [
                  _buildStatusItem(
                    '偵測活動',
                    '${smartDetection.detectedActivities.length}',
                    Icons.radar,
                    Colors.blue,
                  ),
                  const SizedBox(width: 16),
                  _buildStatusItem(
                    '自動記錄',
                    '${smartDetection.autoGeneratedRecords.length}',
                    Icons.eco,
                    Colors.green,
                  ),
                ],
              ),
            ],
          ],
        ),
      ),
    );
  }

  Widget _buildStatusItem(String label, String value, IconData icon, Color color) {
    return Expanded(
      child: Container(
        padding: const EdgeInsets.all(12),
        decoration: BoxDecoration(
          color: color.withOpacity(0.1),
          borderRadius: BorderRadius.circular(8),
        ),
        child: Column(
          children: [
            Icon(icon, color: color, size: 20),
            const SizedBox(height: 4),
            Text(
              value,
              style: TextStyle(
                fontSize: 18,
                fontWeight: FontWeight.bold,
                color: color,
              ),
            ),
            Text(
              label,
              style: TextStyle(
                fontSize: 12,
                color: Colors.grey[600],
              ),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildAutoGeneratedRecordsCard(SmartAutoDetectionService smartDetection, AppLocalizations l10n) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              mainAxisAlignment: MainAxisAlignment.spaceBetween,
              children: [
                Text(
                  '自動生成的記錄',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                ),
                TextButton(
                  onPressed: () => _confirmSaveAutoRecords(smartDetection),
                  child: const Text('保存所有'),
                ),
              ],
            ),
            const SizedBox(height: 12),
            ...smartDetection.autoGeneratedRecords.take(3).map((record) => 
                _buildAutoRecordItem(record, l10n)),
            if (smartDetection.autoGeneratedRecords.length > 3)
              TextButton(
                onPressed: () => _showAllAutoRecords(smartDetection, l10n),
                child: Text('查看全部 ${smartDetection.autoGeneratedRecords.length} 條記錄'),
              ),
          ],
        ),
      ),
    );
  }

  Widget _buildAutoRecordItem(CarbonRecord record, AppLocalizations l10n) {
    return Container(
      margin: const EdgeInsets.only(bottom: 8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Colors.green.withOpacity(0.1),
        borderRadius: BorderRadius.circular(8),
        border: Border.all(color: Colors.green.withOpacity(0.3)),
      ),
      child: Row(
        children: [
          Icon(
            Icons.auto_awesome,
            color: Colors.green,
            size: 20,
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  record.description ?? '自動偵測記錄',
                  style: const TextStyle(fontWeight: FontWeight.bold),
                ),
                Text(
                  '${record.carbonFootprint.toStringAsFixed(2)} kg CO₂',
                  style: const TextStyle(color: Colors.green),
                ),
              ],
            ),
          ),
          IconButton(
            icon: const Icon(Icons.check_circle, color: Colors.green),
            onPressed: () => _saveSingleAutoRecord(record),
          ),
        ],
      ),
    );
  }

  Widget _buildPredictionCard(AppLocalizations l10n) {
    final confidence = _predictedData['confidence'] ?? 0.0;
    final predictedAmount = _predictedData['predicted_amount'] ?? 0.0;
    
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Row(
              children: [
                Icon(Icons.psychology, color: Colors.blue, size: 24),
                const SizedBox(width: 12),
                Text(
                  '智能預測',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                        fontWeight: FontWeight.bold,
                      ),
                ),
              ],
            ),
            const SizedBox(height: 12),
            Text(
              '基於您的歷史行為模式，系統預測您可能的花費金額：',
              style: TextStyle(color: Colors.grey[600]),
            ),
            const SizedBox(height: 8),
            Container(
              padding: const EdgeInsets.all(12),
              decoration: BoxDecoration(
                color: Colors.blue.withOpacity(0.1),
                borderRadius: BorderRadius.circular(8),
              ),
              child: Row(
                children: [
                  Text(
                    '預測金額：NT\$ ${predictedAmount.toStringAsFixed(0)}',
                    style: const TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                    ),
                  ),
                  const Spacer(),
                  Text(
                    '可信度：${(confidence * 100).toStringAsFixed(0)}%',
                    style: TextStyle(
                      color: confidence > 0.7 ? Colors.green : Colors.orange,
                      fontSize: 12,
                    ),
                  ),
                ],
              ),
            ),
            const SizedBox(height: 8),
            TextButton.icon(
              onPressed: () {
                _amountController.text = predictedAmount.toString();
              },
              icon: const Icon(Icons.auto_fix_high),
              label: const Text('使用預測金額'),
            ),
          ],
        ),
      ),
    );
  }

  Widget _buildQuickRecordForm(AppLocalizations l10n) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text(
                '快速記錄',
                style: Theme.of(context).textTheme.titleMedium?.copyWith(
                      fontWeight: FontWeight.bold,
                    ),
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _amountController,
                decoration: InputDecoration(
                  labelText: '金額 (元)',
                  border: const OutlineInputBorder(),
                  prefixIcon: const Icon(Icons.attach_money),
                ),
                keyboardType: TextInputType.number,
                validator: (value) {
                  if (value == null || value.isEmpty) {
                    return '請輸入金額';
                  }
                  if (double.tryParse(value) == null) {
                    return '請輸入有效數字';
                  }
                  return null;
                },
              ),
              const SizedBox(height: 16),
              TextFormField(
                controller: _descriptionController,
                decoration: InputDecoration(
                  labelText: '描述 (可選)',
                  border: const OutlineInputBorder(),
                  prefixIcon: const Icon(Icons.description),
                ),
                maxLines: 2,
              ),
            ],
          ),
        ),
      ),
    );
  }

  Widget _buildManualInputOption(AppLocalizations l10n) {
    return Card(
      child: Padding(
        padding: const EdgeInsets.all(16),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '需要更詳細的記錄？',
              style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                  ),
            ),
            const SizedBox(height: 8),
            Text(
              '使用完整的手動輸入功能，可以記錄更詳細的信息。',
              style: TextStyle(color: Colors.grey[600]),
            ),
            const SizedBox(height: 12),
            SizedBox(
              width: double.infinity,
              child: OutlinedButton.icon(
                onPressed: () {
                  Navigator.of(context).pushNamed('/add_record');
                },
                icon: const Icon(Icons.edit),
                label: const Text('手動輸入'),
              ),
            ),
          ],
        ),
      ),
    );
  }

  Future<void> _saveRecord() async {
    if (!_formKey.currentState!.validate()) return;

    setState(() {
      _isLoading = true;
    });

    try {
      final carbonProvider = Provider.of<CarbonProvider>(context, listen: false);
      final amount = double.parse(_amountController.text);
      final description = _descriptionController.text.trim();

      await carbonProvider.addShoppingRecord(
        userId: 'current_user',
        amount: amount,
        description: description.isEmpty ? '快速記錄' : description,
      );

      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('記錄保存成功')),
      );
      
      Navigator.of(context).pop();
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('保存失敗: $e')),
      );
    } finally {
      setState(() {
        _isLoading = false;
      });
    }
  }

  Future<void> _confirmSaveAutoRecords(SmartAutoDetectionService smartDetection) async {
    final confirmed = await showDialog<bool>(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('保存自動記錄'),
        content: Text('確定要保存所有 ${smartDetection.autoGeneratedRecords.length} 條自動生成的記錄嗎？'),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(false),
            child: const Text('取消'),
          ),
          ElevatedButton(
            onPressed: () => Navigator.of(context).pop(true),
            child: const Text('保存'),
          ),
        ],
      ),
    );

    if (confirmed == true) {
      await _saveAllAutoRecords(smartDetection);
    }
  }

  Future<void> _saveAllAutoRecords(SmartAutoDetectionService smartDetection) async {
    try {
      final carbonProvider = Provider.of<CarbonProvider>(context, listen: false);
      
      for (final record in smartDetection.autoGeneratedRecords) {
        // 將自動生成的記錄添加到碳足跡提供者
        // 這裡需要根據實際的 CarbonProvider 接口來實現
      }
      
      smartDetection.clearAutoGeneratedRecords();
      
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('已保存 ${smartDetection.autoGeneratedRecords.length} 條記錄')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('保存失敗: $e')),
      );
    }
  }

  Future<void> _saveSingleAutoRecord(CarbonRecord record) async {
    try {
      final carbonProvider = Provider.of<CarbonProvider>(context, listen: false);
      
      // 保存單條記錄
      // 這裡需要根據實際的 CarbonProvider 接口來實現
      
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(content: Text('記錄保存成功')),
      );
    } catch (e) {
      ScaffoldMessenger.of(context).showSnackBar(
        SnackBar(content: Text('保存失敗: $e')),
      );
    }
  }

  void _showAllAutoRecords(SmartAutoDetectionService smartDetection, AppLocalizations l10n) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('所有自動記錄'),
        content: SizedBox(
          width: double.maxFinite,
          height: 400,
          child: ListView.builder(
            itemCount: smartDetection.autoGeneratedRecords.length,
            itemBuilder: (context, index) {
              final record = smartDetection.autoGeneratedRecords[index];
              return ListTile(
                leading: const Icon(Icons.auto_awesome, color: Colors.green),
                title: Text(record.description ?? '自動記錄'),
                subtitle: Text('${record.carbonFootprint.toStringAsFixed(2)} kg CO₂'),
                trailing: IconButton(
                  icon: const Icon(Icons.check_circle, color: Colors.green),
                  onPressed: () => _saveSingleAutoRecord(record),
                ),
              );
            },
          ),
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('關閉'),
          ),
          ElevatedButton(
            onPressed: () {
              Navigator.of(context).pop();
              _confirmSaveAutoRecords(smartDetection);
            },
            child: const Text('保存全部'),
          ),
        ],
      ),
    );
  }
}
